package common;

import java.rmi.Remote;
import java.util.HashMap;
import java.util.UUID;

/**
 * User interface
 * It contains its id, ip address, name and the list of chatroom owned by the user, 
 * and a User type stub for the remote host.
 */
public interface IUser extends Remote {
	
	/**
	 * Get user name 
	 * @return the name of the user
	 **/
	public String getName();

	/**
	 * Set or change the user name
	 * @param name the user name
	 */
	public void setName(String name);
	
	/**
	 * Get a unique id of the user
	 * @return A unique id of the user
	 */
	public UUID getId();

	/**
	 * Get IP address of this user 
	 * @return a IP address for this user
	 */
	public String getIP();
	
	/**
	 * Connect to remote host and get its list of chatroom
	 * @param remoteHost  remote host
	 * @param userStub the stub of the local user.
	 * @return  remost host stub
	 */
	public IUser ConnectTo(String remoteHost, IUser userStub);

	/**
	 * This method is used to join a remote chatroom. By getting a remote chatroom, the local user
	 * could first create a new own chatroom which has this new connection. Then adding all connections on the
	 * remote chatroom into the new local chatroom, also add this new connection to the remote chatroom. 
	 * In the meantime, add this new connection to each chatroom which associated with the each connection in 
	 * the remote chatroom.
	 * @param chatroom A remote chatRoom from remote user
	 * @return a new connection
	 */
	public IConnection joinChatroom(IChatroom chatroom);
	
	/**
	 * Get the list of chatrooms of the user
	 * @return a HashMap of chatrooms
	 * */
	public HashMap<UUID, IChatroom> getChatrooms();

	/**
	 * Add a Chatroom to the list of chatrooms of the user
	 * @param chatroom The chatroom to be added
	 * @return whether allowed to add the chatroom.
	 */
	public boolean addRoom(IChatroom chatroom);

	/**
	 * Remove the Chatroom from the list of chatrooms of the user
	 * @param chatroom The chatroom to be removed 
	 * @return whether allowed to remove the chatroom.
	 */
	public boolean removeRoom(IChatroom chatroom);


}